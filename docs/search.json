[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Guide to getting started with OMOP for CURE ID",
    "section": "",
    "text": "This site is designed to provide guidance, scripts and resources for sites transitioning data to OMOP common data model as part of CURE ID."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Guide to getting started with OMOP for CURE ID",
    "section": "",
    "text": "This site is designed to provide guidance, scripts and resources for sites transitioning data to OMOP common data model as part of CURE ID."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Guide to getting started with OMOP for CURE ID",
    "section": "Introduction",
    "text": "Introduction\nThe goals of OMOP are to gain better understanding of human health by improving our ability to analyze observational health data.\nHealth data is stored by individual health systems in unique ways which limits the ability to collaborate and learn from larger populations. This is a problem because certain clinical conditions are infrequent and it is important to have sufficient number of cases to perform statistical tests. De-identified data shared across institutions has the promise of allowing scientists to develop important insights about health which is the motivation to enable greater collaboration.\n\nWhat is a common data model?\nA common data model (CDM) allows multiple health care systems with their individual databases to join forces creating greater populations which can power more compelling scientific studies. A simple way to think about this is the difficulty of finding the silverware drawer in a new kitchen – if there is a unifying rule for where the silverware drawer is located in every kitchen (immediately to right of the sink) it makes it possible to find this much easier. A common data model creates a system so that data elements like “systolic blood pressure” or “sepsis” are recorded and organized in the same way. OMOP stands for Observational Medical Outcomes Partnership and is the common data model of the Observational Health Data Sciences and Informatics program.\n\n\nWhat is an ETL?\nETL stands for Extract, Transform, and Load. Essentially this is the process of mapping data from one system to another."
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "Guide to getting started with OMOP for CURE ID",
    "section": "Getting started",
    "text": "Getting started\nThe code for the CURE ID project is hosted on GitHub. GitHub is a web-based platform that allows developers to host, review, and collaborate on code repositories. It is widely used for version control and source code management, and it provides features such as issue tracking, wikis, and project management tools to facilitate team collaboration."
  },
  {
    "objectID": "index.html#cure-id-technical-support-checklist",
    "href": "index.html#cure-id-technical-support-checklist",
    "title": "Guide to getting started with OMOP for CURE ID",
    "section": "CURE ID technical support checklist",
    "text": "CURE ID technical support checklist\n\nCore site team identified and technical kickoff call scheduled\nDetermine feasibility of using Edge Tool Suite\nIf using Edge Tool Suite is not possible, has the site determined a path forward, for example using Spectrum Health Scripts?\nMembers of core team send proof of course completion to Danielle Boyce for the following free EHDEN academy courses:\n\nCourse: OMOP CDM and Standardised Vocabularies (ehden.eu)\nCourse: Extract, Transform and Load (ehden.eu)\n\nSite Completes CURE ID Manual OMOP Data Mapping Template\nJHU reviews steps for performing ETL process by walking through GitHub scripts\nMeetings with JHU software contractors arranged, if needed\nSite confirms that they are using most recent GitHub scripts before proceeding\nData Quality Dashboard Run\nJSON and script output sent to Danielle Boyce\nDQD and concept counts approved or issues identified and reviewed with technical team\nDQD and concept counts re-run and approved by JHU technical team\nRun CURE ID scripts (see OMOP Cohort Creation and De-identification Guide)\nDe-identified data exported to CSV file\nJHU/C-Path technical team reviews CSV files before transfer\nAny caveats in the data documented in Data Export Cover Sheet\nData transfer arrangements made by contacting Smitty Heavner"
  },
  {
    "objectID": "index.html#omop-cohort-creation-and-de-identification-guide",
    "href": "index.html#omop-cohort-creation-and-de-identification-guide",
    "title": "Guide to getting started with OMOP for CURE ID",
    "section": "OMOP Cohort Creation and De-identification Guide",
    "text": "OMOP Cohort Creation and De-identification Guide\n\n\nUpdated: 7/26/2023\n\n\nThe following scripts are to be run on a site’s full OMOP dataset in order to prepare the relevant data for sharing with the VIRUS registry. Each script should be run on the same server as the OMOP data but can be customized to run on the preferred Database and Schema.\nInstructions: Replace the database name and schema in each of these scripts with your own, then run the cohort creation and deidentification scripts in the following sequence:\n01 – Cohort Creation........................... (Filename: 01_CURE_ID_Cohort.sql)\n02 – Generate CURE ID Tables............ (Filename: 02_CURE_ID_All_Tables.sql)\n03 – Deidentify Rare Conditions………. (Filename: 03_CURE_ID_replace_rare_conditions_with_parents.sql)\n04 – Generate OMOP Tables………….. (Filename: 04_DE_ID_CDM_Table_ddl.sql)\n05 – Remove Identifiers…………………. (Filename: 05_DE_ID_script.sql)\n06 – Run Data Quality Checks…………. (Filename: 06_DE_ID_Quality_Checks.sql)\n07-A – Profile Conditions..................... (Filename: 07_A_condition_profile.sql)\n07-B – Profile Measurements…………. (Filename: 07_B_measurement_profile.sql)\n07-C – Profile Drug Exposure………….. (Filename: 07_C_drug_exposure_profile.sql)\n07-D – Profile Unmapped Drugs......... (Filename: 07_D_review_unmapped_drugs.sql)\n07-D – Profile Devices……………………. (Filename: 07_E_device_profile.sql)\nOMOP Cohort Creation and Deidentification Process:\n\n01 – Cohort Creation Script\nFilename: 01_CURE_ID_Cohort.sql\nPurpose: This script creates a cohort of patients for the CURE ID registry. The patient list is saved in the cohort table, along with other useful data elements.\nDescription: This SQL script creates a cohort of COVID-positive hospitalized patients based on specific criteria. The script performs several steps to identify and filter the patients before finally creating the cohort table. The script sets the context to use a specific database, but the actual name of the database is meant to be provided by the user.\nSteps:\n1)      Create cohort table.\n2)      Identify patients (inpatient and outpatient) with covid positive lab results\na.       Use OMOP concepts that represent the LOINC codes for SARS-COV-2 nucleic acid test\nb.       The concept ids here represent LOINC or SNOMED codes for standard ways to code a lab that is positive.\n3)      Identify the first positive covid test per patient (after January 1, 2020).\n4)      Limit to covid-positive patients with inpatient encounters.\n5)      Apply all inclusion/exclusion criteria to identify all patients hospitalized with symptomatic covid-19 up to 21 days after a positive SARS-CoV-2 test or up to 7 days prior to a positive SARS-CoV-2 test\n6)      Find the closest inpatient encounter to first positive SARS-COV-2 test (for patients hospitalized more than once)\n7)      Account for edge cases where patients have two hospitalizations same number of absolute days from SARS-COV-2 test (Ex: Patient hospitalized separately 3 days before and 3 days after SARS-COV-2 test)\n8)      Create the cohort by adding on birth date and death date\n\n\n02 – CURE ID Tables Script\nFilename: 02_CURE_ID_All_Tables.sql\nPurpose: This script takes your OMOP dataset and generates a copy of key tables that have been filtered down to only include people and records related to the CURE ID registry.\nDescription: Creates CURE_ID tables from the generated CURE_ID cohort.\nDependencies: This script depends on CURE_ID_Cohort.sql, and must be run after that script completes\nSteps:\n1)      Load Person table\n2)      Load Measurements table\n3)      Load Drug Exposure table\n4)      Load Death table\n5)      Load Observation data\n6)      Load Procedure Occurrence Table\n7)      Load Condition Occurrence Table\n8)      Load Visit Occurrence table\n9)      Load Device Exposure table\n\n\n03 – Replace Rare Conditions Script\nFilename: 03_CURE_ID_replace_rare_conditions_with_parents.sql\nPurpose: Replace conditions occurring 10 or less times in the dataset with parent concepts that have at least 10 counts\nDependencies: This script requires the cohort table built from 01_CURE_ID_Cohort.sql, and the data loaded into the Condition Occurrence table built from 02_CURE_ID_All_Tables.sql.\nSteps:\n1)      Condition roll up: concepts are mapped to their corresponding ancestor concept(s)\n2)      Create table that counts the ancestor concepts for each original concept\n3)      Create table that counts the original concepts\n4)      Filter to only include conditions that have more than 10 counts\n5)      Get just the most specific condition in the ancestor-descendent hierarchy\n\n\n04 – Deidentified Data DDL Script\nFilename: 04_DE_ID_CDM_Table_ddl.sql\nPurpose: Generate the necessary tables for the de-identified version of the CURE ID Cohort\nDependencies: None\nCustomization: By default this script will create tables in the Results schema, and will preface the table names with “deident,” however this can be set to whatever value you desire.\nSteps:\n1)      Create the Person table\n2)      Create the Death table\n3)      Create the Visit Occurrence table\n4)      Create the Drug Exposure table\n5)      Create the Device Exposure table\n6)      Create the Condition Occurrence table\n7)      Create the Measurement table\n8)      Create the Observation table\n\n\n05 – Deidentification Script\nFilename: 05_DE_ID_script.sql\nPurpose: This script creates a copy of the Cohort and removes identifying characteristics to prepare the data for sharing with the VIRUS registry.\nDependencies: This script requires the cohort table built from 01_CURE_ID_Cohort.sql, and the data loaded into all tables built from 02_CURE_ID_All_Tables.sql, rare conditions replace from 03_CURE_ID_replace_rare_conditions_with_parents.sql, and the de-identified OMOP CDM tables generated from 04_DE_ID_CDM_Table_ddl.sql.\nDescription: Run this file to generate a deidentified copy of your target data. Insert your data into the OMOP tables, and de-identify person_id, and date fields using date.shift. (*If a person is 90 years of age or older, assign a random age between 90-99 years.)\nSteps:\n1)      Use find and replace to set source and target DB and Schema names\n2)      Load the OMOP Person table, and de-identify\n3)      Load the OMOP Visit Occurrence table, and de-identify\n4)      Load the OMOP Condition Occurrence table, and de-identify\n5)      Load the OMOP Procedure Occurrence table, and de-identify\n6)      Load the OMOP Drug Exposure table, and de-identify\n7)      Load the OMOP Observation table, and de-identify\n8)      Load the OMOP Death table, and de-identify\n9)      Load the OMOP Device Exposure table, and de-identify\n10)   Load the OMOP Measurement table, and de-identify\nReassignment of Person IDs:\n·         Person IDs are regenerated sequentially from a sorted copy of the Person table. These new Person IDs are carried throughout the CDM to all tables that reference it.\nDate Shifting:\n·         Each person is assigned a random date shift value between -186 and +186 days. All dates for that person are then shifted shifted by that amount.\n·         Birthdays: After date shifting a person’s birthday, the day is then set to the first of the new birth month. If the person would be &gt; 89 years old then they are assigned a random birth year that would make them 90-99 years old.\nDate Truncation:\n·         A user-defined Start and End date are used to exclude any date shifted data that falls outside of the target date range (E.G. Procedures, conditions occurrences, etc. Does not include Birthdates).\nRemoval of other identifiers:\n·         Other potentially identifying datapoints are removed from the dataset such as location_id, provider_id, and care_site_id\n\n\n06 – Quality Checks Script (optional)\nFilename: 06_DE_ID_Quality_Checks.sql\nPurpose: This script checks basic metrics for each table in the deidentified dataset to ensure the previous scripts were successful. This does\nDescription: This script runs a number of summary level quality checks for each table to audit basic data counts and date ranges.\nDependencies: This script requires the populated deidentified OMOP tables generated from the sequence of running:\n01_CURE_ID_Cohort.sql,\n02_CURE_ID_All_Tables.sql,\n03_CURE_ID_replace_rare_conditions_with_parents.sql,\n04_DE_ID_CDM_Table_ddl.sql,\n05_DE_ID_script.sql\nSteps:\n1)      Count distinct person_ids and find the maximum and minimum birthdates in the OMOP Person table.\n2)      Count distinct person_ids in the OMOP Death table.\n3)      Count distinct person_ids, count number of records per observation_concept_id, and find the maximum and minimum observation dates for all records in the OMOP Observation table.\n4)      Count distinct person_ids, count number of records per procedure_concept_id, and find the maximum and minimum procedure dates for all records in the OMOP Procedure Occurrence table.\n5)      Count distinct person_ids, count number of records per condition_concept_id, and find the maximum and minimum condition dates for all records in the OMOP Condition Occurrence table.\n6)      Count distinct person_ids, count number of records per measurement_concept_id, and find the maximum and minimum measurement dates for all records in the OMOP Measurement table.\n7)      Count distinct person_ids, count number of records per device_concept_id, and find the maximum and minimum device exposure dates for all records in the OMOP Device Exposure table.\n8)      Count distinct person_ids, count number of records per drug_concept_id, and find the maximum and minimum drug exposure dates for all records in the OMOP Drug Exposure table.\n\n\n07 – Cohort Profile Scripts\nDependencies: These scripts require the populated deidentified OMOP tables generated from the sequence of running scripts 1-5:\n01_CURE_ID_Cohort.sql,\n02_CURE_ID_All_Tables.sql,\n03_CURE_ID_replace_rare_conditions_with_parents.sql,\n04_DE_ID_CDM_Table_ddl.sql,\n05_DE_ID_script.sql\n07-A – Condition Profile\nFilename: 07_A_condition_profile.sql\nPurpose: Generate a profile of condition prevalence in the final cohort.\nDescription: Condition counts are calculated per patient and are aggregated by parent concepts for each condition concept present in the final OMOP Condition Occurrence table.\n07-B – Measurement Profile\nFilename: 07_B_measurement_profile.sql\nPurpose: Generate a profile of measurement prevalence in the final cohort.\nDescription: Measurement counts are calculated per patient and are aggregated by parent concepts for each measurement concept present in the final OMOP Measurement table.\n07-C – Drug Exposure Profile\nFilename: 07_C_drug_exposure_profile.sql\nPurpose: Generate a profile of drug prevalence in the final cohort.\nDescription: Drug counts are calculated per patient and are aggregated by ingredient for each drug concept present in the final OMOP Drug Exposure table.\n07-D – Unmapped Drugs Profile\nFilename: 07_D_review_unmapped_drugs.sql\nPurpose: Generate a profile of drugs that are not mapped to drug_concept_ids in the final cohort.\nDescription: This file filters drugs that were unsuccessfully mapped to a drug_concept_id when running the 02_CURE_ID_All_Tables.sql script. Drug source values for which the drug_concept_id is “0” and have at least 20 instances in the final cohort are aggregated for manual review.\n** Drug source values can contain PHI. Please review the output for PHI before sharing.\n07-E – Device Profile\nFilename: 07_E_device_profile.sql\nPurpose: Generate a profile of device prevalence in the final cohort.\nDescription: Device counts are calculated per patient and are aggregated by parent concepts for each device concept present in the final OMOP Device Exposure table."
  },
  {
    "objectID": "index.html#omop-table-and-field-basics",
    "href": "index.html#omop-table-and-field-basics",
    "title": "Guide to getting started with OMOP for CURE ID",
    "section": "OMOP Table and Field Basics",
    "text": "OMOP Table and Field Basics\nAdapted from OHDSI CDM Site: Data Model Conventions \n\nTables\nFor the tables of the main domains of the CDM it is imperative that concepts used are strictly limited to the domain. For example, the CONDITION_OCCURRENCE table contains only information about conditions (diagnoses, signs, symptoms), but no information about procedures. Not all source coding schemes adhere to such rules. For example, ICD-9-CM codes, which contain mostly diagnoses of human disease, also contain information about the status of patients having received a procedure. The ICD-9-CM code V20.3 ‘Newborn health supervision’ defines a continuous procedure and is therefore stored in the PROCEDURE_OCCURRENCE table.\n\n\nFields\nVariable names across all tables follow one convention:\n\n\n\nNotation\nDescription\n\n\n_SOURCE_VALUE\nVerbatim information from the source data, typically used in ETL to map to CONCEPT_ID, and not to be used by any standard analytics. For example, CONDITION_SOURCE_VALUE = ‘787.02’ was the ICD-9 code captured as a diagnosis from the administrative claim.\n\n\n_ID\nUnique identifiers for key entities, which can serve as foreign keys to establish relationships across entities. For example, PERSON_ID uniquely identifies each individual. VISIT_OCCURRENCE_ID uniquely identifies a PERSON encounter at a point of care.\n\n\n_CONCEPT_ID\nForeign key into the Standardized Vocabularies (i.e. the standard_concept attribute for the corresponding term is true), which serves as the primary basis for all standardized analytics. For example, CONDITION_CONCEPT_ID = 31967 contains the reference value for the SNOMED concept of ‘Nausea’\n\n\n_SOURCE_CONCEPT_ID\nForeign key into the Standardized Vocabularies representing the concept and terminology used in the source data, when applicable. For example, CONDITION_SOURCE_CONCEPT_ID = 45431665 denotes the concept of ‘Nausea’ in the Read terminology; the analogous CONDITION_CONCEPT_ID might be 31967, since SNOMED-CT is the Standardized Vocabulary for most clinical diagnoses and findings.\n\n\n_TYPE_CONCEPT_ID\nDelineates the origin of the source information, standardized within the Standardized Vocabularies. For example, DRUG_TYPE_CONCEPT_ID can allow analysts to discriminate between ‘Pharmacy dispensing’ and ’Prescription written\n\n\n\nFor more information, see:\nData Model Conventions\nHow to Calculate Drug Dose \nClinical Data Tables"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site is designed to provide guidance, scripts and resources for sites participating in transitioning data to OMOP common data model as part of CURE ID\nThis work was funded by the CURE ID initiative https://cure.ncats.io\nCure ID Collaborators"
  },
  {
    "objectID": "about.html#footnotes",
    "href": "about.html#footnotes",
    "title": "About",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nJohns Hopkins School of Medicine↩︎"
  }
]